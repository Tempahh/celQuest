"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/questions";
exports.ids = ["pages/api/questions"];
exports.modules = {

/***/ "@google/generative-ai":
/*!****************************************!*\
  !*** external "@google/generative-ai" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@google/generative-ai");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "(api)/./pages/api/questions.js":
/*!********************************!*\
  !*** ./pages/api/questions.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _utils_scraper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/scraper */ \"(api)/./utils/scraper.js\");\n/* harmony import */ var _utils_scraper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_utils_scraper__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ai */ \"(api)/./utils/ai.js\");\n/* harmony import */ var _utils_ai__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_utils_ai__WEBPACK_IMPORTED_MODULE_1__);\n\n\nasync function handler(req, res) {\n    if (req.method === \"POST\") {\n        try {\n            console.log(\"API keys:\", {\n                GOOGLE_SEARCH_ENGINE_ID: process.env.GOOGLE_SEARCH_ENGINE_ID,\n                GOOGLE_API_KEY: process.env.GOOGLE_API_KEY,\n                GOOGLE_AI_API_KEY: process.env.GOOGLE_AI_API_KEY\n            });\n            const { InputtedCelebrityFromUser  } = req.body;\n            console.log(\"Received celebrity:\", InputtedCelebrityFromUser);\n            const searchResults = await (0,_utils_scraper__WEBPACK_IMPORTED_MODULE_0__.scrapeQuestionsFromGoogleCustomSearchApi)(InputtedCelebrityFromUser);\n            if (searchResults === null) {\n                console.log(\"No search results found\");\n                return res.status(404).json({\n                    error: \"No information found for this celebrity.\"\n                });\n            }\n            //console.log('Search results received');\n            const generatedQuestions = await (0,_utils_ai__WEBPACK_IMPORTED_MODULE_1__.generateQuestionsAboutCelebrityFromSearchResults)(InputtedCelebrityFromUser, searchResults);\n            //console.log('Generated questions:', generatedQuestions);\n            if (generatedQuestions.length === 0) {\n                return res.status(404).json({\n                    error: \"No questions could be generated.\"\n                });\n            }\n            res.status(200).json({\n                questions: generatedQuestions\n            });\n        } catch (error) {\n            console.error(\"API Error:\", error);\n            res.status(500).json({\n                error: \"An error occurred while processing your request.\"\n            });\n        }\n    } else {\n        res.setHeader(\"Allow\", [\n            \"POST\"\n        ]);\n        res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvcXVlc3Rpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQStFO0FBQ0c7QUFFbkUsZUFBZUUsT0FBTyxDQUFDQyxHQUFHLEVBQUVDLEdBQUcsRUFBRTtJQUM5QyxJQUFJRCxHQUFHLENBQUNFLE1BQU0sS0FBSyxNQUFNLEVBQUU7UUFDekIsSUFBSTtZQUNGQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxXQUFXLEVBQUU7Z0JBQ3ZCQyx1QkFBdUIsRUFBRUMsT0FBTyxDQUFDQyxHQUFHLENBQUNGLHVCQUF1QjtnQkFDNURHLGNBQWMsRUFBRUYsT0FBTyxDQUFDQyxHQUFHLENBQUNDLGNBQWM7Z0JBQzFDQyxpQkFBaUIsRUFBRUgsT0FBTyxDQUFDQyxHQUFHLENBQUNFLGlCQUFpQjthQUNqRCxDQUFDLENBQUM7WUFFSCxNQUFNLEVBQUVDLHlCQUF5QixHQUFFLEdBQUdWLEdBQUcsQ0FBQ1csSUFBSTtZQUM5Q1IsT0FBTyxDQUFDQyxHQUFHLENBQUMscUJBQXFCLEVBQUVNLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTUUsYUFBYSxHQUFHLE1BQU1mLHdGQUF3QyxDQUFDYSx5QkFBeUIsQ0FBQztZQUUvRixJQUFJRSxhQUFhLEtBQUssSUFBSSxFQUFFO2dCQUMxQlQsT0FBTyxDQUFDQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztnQkFDdkMsT0FBT0gsR0FBRyxDQUFDWSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztvQkFBRUMsS0FBSyxFQUFFLDBDQUEwQztpQkFBRSxDQUFDLENBQUM7WUFDckYsQ0FBQztZQUVELHlDQUF5QztZQUN6QyxNQUFNQyxrQkFBa0IsR0FBRyxNQUFNbEIsMkZBQWdELENBQUNZLHlCQUF5QixFQUFFRSxhQUFhLENBQUM7WUFDM0gsMERBQTBEO1lBRTFELElBQUlJLGtCQUFrQixDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNuQyxPQUFPaEIsR0FBRyxDQUFDWSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztvQkFBRUMsS0FBSyxFQUFFLGtDQUFrQztpQkFBRSxDQUFDLENBQUM7WUFDN0UsQ0FBQztZQUVEZCxHQUFHLENBQUNZLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO2dCQUFFSSxTQUFTLEVBQUVGLGtCQUFrQjthQUFFLENBQUMsQ0FBQztRQUMxRCxFQUFFLE9BQU9ELEtBQUssRUFBRTtZQUNkWixPQUFPLENBQUNZLEtBQUssQ0FBQyxZQUFZLEVBQUVBLEtBQUssQ0FBQyxDQUFDO1lBQ25DZCxHQUFHLENBQUNZLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO2dCQUFFQyxLQUFLLEVBQUUsa0RBQWtEO2FBQUUsQ0FBQyxDQUFDO1FBQ3RGLENBQUM7SUFDSCxPQUFPO1FBQ0xkLEdBQUcsQ0FBQ2tCLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFBQyxNQUFNO1NBQUMsQ0FBQyxDQUFDO1FBQ2pDbEIsR0FBRyxDQUFDWSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRXBCLEdBQUcsQ0FBQ0UsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJjZWxlYnF1ZXRpb25nZW4vLi9wYWdlcy9hcGkvcXVlc3Rpb25zLmpzPzA4OTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NyYXBlUXVlc3Rpb25zRnJvbUdvb2dsZUN1c3RvbVNlYXJjaEFwaSB9IGZyb20gJy4uLy4uL3V0aWxzL3NjcmFwZXInO1xuaW1wb3J0IHsgZ2VuZXJhdGVRdWVzdGlvbnNBYm91dENlbGVicml0eUZyb21TZWFyY2hSZXN1bHRzIH0gZnJvbSAnLi4vLi4vdXRpbHMvYWknO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XG4gIGlmIChyZXEubWV0aG9kID09PSAnUE9TVCcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ0FQSSBrZXlzOicsIHtcbiAgICAgICAgR09PR0xFX1NFQVJDSF9FTkdJTkVfSUQ6IHByb2Nlc3MuZW52LkdPT0dMRV9TRUFSQ0hfRU5HSU5FX0lELFxuICAgICAgICBHT09HTEVfQVBJX0tFWTogcHJvY2Vzcy5lbnYuR09PR0xFX0FQSV9LRVksXG4gICAgICAgIEdPT0dMRV9BSV9BUElfS0VZOiBwcm9jZXNzLmVudi5HT09HTEVfQUlfQVBJX0tFWSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB7IElucHV0dGVkQ2VsZWJyaXR5RnJvbVVzZXIgfSA9IHJlcS5ib2R5O1xuICAgICAgY29uc29sZS5sb2coJ1JlY2VpdmVkIGNlbGVicml0eTonLCBJbnB1dHRlZENlbGVicml0eUZyb21Vc2VyKTtcbiAgICAgIGNvbnN0IHNlYXJjaFJlc3VsdHMgPSBhd2FpdCBzY3JhcGVRdWVzdGlvbnNGcm9tR29vZ2xlQ3VzdG9tU2VhcmNoQXBpKElucHV0dGVkQ2VsZWJyaXR5RnJvbVVzZXIpO1xuICAgICAgXG4gICAgICBpZiAoc2VhcmNoUmVzdWx0cyA9PT0gbnVsbCkge1xuICAgICAgICBjb25zb2xlLmxvZygnTm8gc2VhcmNoIHJlc3VsdHMgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdObyBpbmZvcm1hdGlvbiBmb3VuZCBmb3IgdGhpcyBjZWxlYnJpdHkuJyB9KTtcbiAgICAgIH1cblxuICAgICAgLy9jb25zb2xlLmxvZygnU2VhcmNoIHJlc3VsdHMgcmVjZWl2ZWQnKTtcbiAgICAgIGNvbnN0IGdlbmVyYXRlZFF1ZXN0aW9ucyA9IGF3YWl0IGdlbmVyYXRlUXVlc3Rpb25zQWJvdXRDZWxlYnJpdHlGcm9tU2VhcmNoUmVzdWx0cyhJbnB1dHRlZENlbGVicml0eUZyb21Vc2VyLCBzZWFyY2hSZXN1bHRzKTtcbiAgICAgIC8vY29uc29sZS5sb2coJ0dlbmVyYXRlZCBxdWVzdGlvbnM6JywgZ2VuZXJhdGVkUXVlc3Rpb25zKTtcbiAgICAgIFxuICAgICAgaWYgKGdlbmVyYXRlZFF1ZXN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdObyBxdWVzdGlvbnMgY291bGQgYmUgZ2VuZXJhdGVkLicgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgcXVlc3Rpb25zOiBnZW5lcmF0ZWRRdWVzdGlvbnMgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0FQSSBFcnJvcjonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcHJvY2Vzc2luZyB5b3VyIHJlcXVlc3QuJyB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVzLnNldEhlYWRlcignQWxsb3cnLCBbJ1BPU1QnXSk7XG4gICAgcmVzLnN0YXR1cyg0MDUpLmVuZChgTWV0aG9kICR7cmVxLm1ldGhvZH0gTm90IEFsbG93ZWRgKTtcbiAgfVxufSJdLCJuYW1lcyI6WyJzY3JhcGVRdWVzdGlvbnNGcm9tR29vZ2xlQ3VzdG9tU2VhcmNoQXBpIiwiZ2VuZXJhdGVRdWVzdGlvbnNBYm91dENlbGVicml0eUZyb21TZWFyY2hSZXN1bHRzIiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsImNvbnNvbGUiLCJsb2ciLCJHT09HTEVfU0VBUkNIX0VOR0lORV9JRCIsInByb2Nlc3MiLCJlbnYiLCJHT09HTEVfQVBJX0tFWSIsIkdPT0dMRV9BSV9BUElfS0VZIiwiSW5wdXR0ZWRDZWxlYnJpdHlGcm9tVXNlciIsImJvZHkiLCJzZWFyY2hSZXN1bHRzIiwic3RhdHVzIiwianNvbiIsImVycm9yIiwiZ2VuZXJhdGVkUXVlc3Rpb25zIiwibGVuZ3RoIiwicXVlc3Rpb25zIiwic2V0SGVhZGVyIiwiZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/questions.js\n");

/***/ }),

/***/ "(api)/./utils/ai.js":
/*!*********************!*\
  !*** ./utils/ai.js ***!
  \*********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { GoogleGenerativeAI  } = __webpack_require__(/*! @google/generative-ai */ \"@google/generative-ai\");\n// Access your API key as an environment variable\nconst genAI = new GoogleGenerativeAI(process.env.GOOGLE_AI_API_KEY);\nasync function generateQuestionsAboutCelebrityFromSearchResults(InputtedCelebrityFromUser, searchResultsFromGoogleCustomSearchApi) {\n    const model = genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n    });\n    const prompt = `\n  You are an AI assistant tasked with generating interesting and insightful questions about ${InputtedCelebrityFromUser} based on the provided search results.\n\n  Here are the search results in JSON format:\n  ${searchResultsFromGoogleCustomSearchApi}\n\n  Please perform the following tasks:\n  1. Analyze the search results to understand key aspects of ${InputtedCelebrityFromUser}'s life, career, and public persona.\n  2. Generate 5 thought-provoking questions about ${InputtedCelebrityFromUser} that:\n     a) Are based on factual information from the search results\n     b) Cover different aspects of ${InputtedCelebrityFromUser}'s life or career\n     c) Encourage deeper discussion or reflection\n     d) Are not easily answerable with a simple yes or no\n  3. For each question, provide a brief context or explanation of why it's interesting or relevant.\n  4. Format your response as a numbered list of questions and contexts.\n\n  Example format:\n  1. Question: How has [Celebrity]'s approach to [specific aspect] evolved throughout their career?\n  Context: Based on the search results, [Celebrity] has been known for [specific trait]. This question explores how that has changed over time.\n\n  2. Question: [Next question]\n  Context: [Next context]\n\n  ... and so on for 10 questions.\n  `;\n    let functionToReturnTheListOfQuestionsInJsonFormat = async ()=>{\n        try {\n            console.log(\"Sending prompt to AI model\");\n            const result = await model.generateContent(prompt);\n            const AiResponse = await result.response;\n            const text = AiResponse.text();\n            console.log(\"AI response received:\", text);\n            // Parse the text response into an array of question-context pairs\n            let questionsAndContext = [];\n            const sections = text.split(/\\d+\\.\\s+/).filter(Boolean);\n            for (const section of sections){\n                const [questionPart, contextPart] = section.split(/Context:/i);\n                if (questionPart && contextPart) {\n                    const question = questionPart.replace(/^Question:\\s*/i, \"\").trim();\n                    const context = contextPart.trim();\n                    questionsAndContext.push({\n                        question,\n                        context\n                    });\n                }\n            }\n            console.log(\"Parsed questions and context:\", questionsAndContext);\n            return questionsAndContext;\n        } catch (error) {\n            console.error(\"Error generating questions:\", error);\n            return [];\n        }\n    };\n    return functionToReturnTheListOfQuestionsInJsonFormat(); // Added parentheses to call the function\n}\nmodule.exports = {\n    generateQuestionsAboutCelebrityFromSearchResults\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi91dGlscy9haS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQU0sRUFBRUEsa0JBQWtCLEdBQUUsR0FBR0MsbUJBQU8sQ0FBQyxvREFBdUIsQ0FBQztBQUUvRCxpREFBaUQ7QUFDakQsTUFBTUMsS0FBSyxHQUFHLElBQUlGLGtCQUFrQixDQUFDRyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsaUJBQWlCLENBQUM7QUFFbkUsZUFBZUMsZ0RBQWdELENBQUNDLHlCQUF5QixFQUFFQyxzQ0FBc0MsRUFBRTtJQUNqSSxNQUFNQyxLQUFLLEdBQUdQLEtBQUssQ0FBQ1Esa0JBQWtCLENBQUM7UUFBRUQsS0FBSyxFQUFFLFlBQVk7S0FBRSxDQUFDO0lBRS9ELE1BQU1FLE1BQU0sR0FBRyxDQUFDOzRGQUMwRSxFQUFFSix5QkFBeUIsQ0FBQzs7O0VBR3RILEVBQUVDLHNDQUFzQyxDQUFDOzs7NkRBR2tCLEVBQUVELHlCQUF5QixDQUFDO2tEQUN2QyxFQUFFQSx5QkFBeUIsQ0FBQzs7bUNBRTNDLEVBQUVBLHlCQUF5QixDQUFDOzs7Ozs7Ozs7Ozs7OztFQWM3RCxDQUFDO0lBRUQsSUFBSUssOENBQThDLEdBQUcsVUFBWTtRQUMvRCxJQUFJO1lBRUZDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUM7WUFDMUMsTUFBTUMsTUFBTSxHQUFHLE1BQU1OLEtBQUssQ0FBQ08sZUFBZSxDQUFDTCxNQUFNLENBQUM7WUFDbEQsTUFBTU0sVUFBVSxHQUFHLE1BQU1GLE1BQU0sQ0FBQ0csUUFBUTtZQUN4QyxNQUFNQyxJQUFJLEdBQUdGLFVBQVUsQ0FBQ0UsSUFBSSxFQUFFO1lBQzlCTixPQUFPLENBQUNDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRUssSUFBSSxDQUFDLENBQUM7WUFFN0Msa0VBQWtFO1lBQ2xFLElBQUlDLG1CQUFtQixHQUFHLEVBQUU7WUFDNUIsTUFBTUMsUUFBUSxHQUFHRixJQUFJLENBQUNHLEtBQUssWUFBWSxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBQztZQUV2RCxLQUFLLE1BQU1DLE9BQU8sSUFBSUosUUFBUSxDQUFFO2dCQUM5QixNQUFNLENBQUNLLFlBQVksRUFBRUMsV0FBVyxDQUFDLEdBQUdGLE9BQU8sQ0FBQ0gsS0FBSyxhQUFhO2dCQUM5RCxJQUFJSSxZQUFZLElBQUlDLFdBQVcsRUFBRTtvQkFDL0IsTUFBTUMsUUFBUSxHQUFHRixZQUFZLENBQUNHLE9BQU8sbUJBQW1CLEVBQUUsQ0FBQyxDQUFDQyxJQUFJLEVBQUU7b0JBQ2xFLE1BQU1DLE9BQU8sR0FBR0osV0FBVyxDQUFDRyxJQUFJLEVBQUU7b0JBQ2xDVixtQkFBbUIsQ0FBQ1ksSUFBSSxDQUFDO3dCQUFFSixRQUFRO3dCQUFFRyxPQUFPO3FCQUFFLENBQUMsQ0FBQztnQkFDbEQsQ0FBQztZQUNILENBQUM7WUFFRGxCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLCtCQUErQixFQUFFTSxtQkFBbUIsQ0FBQyxDQUFDO1lBQ2xFLE9BQU9BLG1CQUFtQixDQUFDO1FBQzdCLEVBQUUsT0FBT2EsS0FBSyxFQUFFO1lBQ2RwQixPQUFPLENBQUNvQixLQUFLLENBQUMsNkJBQTZCLEVBQUVBLEtBQUssQ0FBQyxDQUFDO1lBQ3BELE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQztJQUNILENBQUM7SUFFQyxPQUFPckIsOENBQThDLEVBQUUsQ0FBQyxDQUFDLHlDQUF5QztBQUNwRyxDQUFDO0FBQ0RzQixNQUFNLENBQUNDLE9BQU8sR0FBRztJQUFFN0IsZ0RBQWdEO0NBQUUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYmNlbGVicXVldGlvbmdlbi8uL3V0aWxzL2FpLmpzP2JhODQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBHb29nbGVHZW5lcmF0aXZlQUkgfSA9IHJlcXVpcmUoXCJAZ29vZ2xlL2dlbmVyYXRpdmUtYWlcIik7XG5cbi8vIEFjY2VzcyB5b3VyIEFQSSBrZXkgYXMgYW4gZW52aXJvbm1lbnQgdmFyaWFibGVcbmNvbnN0IGdlbkFJID0gbmV3IEdvb2dsZUdlbmVyYXRpdmVBSShwcm9jZXNzLmVudi5HT09HTEVfQUlfQVBJX0tFWSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlUXVlc3Rpb25zQWJvdXRDZWxlYnJpdHlGcm9tU2VhcmNoUmVzdWx0cyhJbnB1dHRlZENlbGVicml0eUZyb21Vc2VyLCBzZWFyY2hSZXN1bHRzRnJvbUdvb2dsZUN1c3RvbVNlYXJjaEFwaSkge1xuICBjb25zdCBtb2RlbCA9IGdlbkFJLmdldEdlbmVyYXRpdmVNb2RlbCh7IG1vZGVsOiBcImdlbWluaS1wcm9cIiB9KTtcblxuICBjb25zdCBwcm9tcHQgPSBgXG4gIFlvdSBhcmUgYW4gQUkgYXNzaXN0YW50IHRhc2tlZCB3aXRoIGdlbmVyYXRpbmcgaW50ZXJlc3RpbmcgYW5kIGluc2lnaHRmdWwgcXVlc3Rpb25zIGFib3V0ICR7SW5wdXR0ZWRDZWxlYnJpdHlGcm9tVXNlcn0gYmFzZWQgb24gdGhlIHByb3ZpZGVkIHNlYXJjaCByZXN1bHRzLlxuXG4gIEhlcmUgYXJlIHRoZSBzZWFyY2ggcmVzdWx0cyBpbiBKU09OIGZvcm1hdDpcbiAgJHtzZWFyY2hSZXN1bHRzRnJvbUdvb2dsZUN1c3RvbVNlYXJjaEFwaX1cblxuICBQbGVhc2UgcGVyZm9ybSB0aGUgZm9sbG93aW5nIHRhc2tzOlxuICAxLiBBbmFseXplIHRoZSBzZWFyY2ggcmVzdWx0cyB0byB1bmRlcnN0YW5kIGtleSBhc3BlY3RzIG9mICR7SW5wdXR0ZWRDZWxlYnJpdHlGcm9tVXNlcn0ncyBsaWZlLCBjYXJlZXIsIGFuZCBwdWJsaWMgcGVyc29uYS5cbiAgMi4gR2VuZXJhdGUgNSB0aG91Z2h0LXByb3Zva2luZyBxdWVzdGlvbnMgYWJvdXQgJHtJbnB1dHRlZENlbGVicml0eUZyb21Vc2VyfSB0aGF0OlxuICAgICBhKSBBcmUgYmFzZWQgb24gZmFjdHVhbCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBzZWFyY2ggcmVzdWx0c1xuICAgICBiKSBDb3ZlciBkaWZmZXJlbnQgYXNwZWN0cyBvZiAke0lucHV0dGVkQ2VsZWJyaXR5RnJvbVVzZXJ9J3MgbGlmZSBvciBjYXJlZXJcbiAgICAgYykgRW5jb3VyYWdlIGRlZXBlciBkaXNjdXNzaW9uIG9yIHJlZmxlY3Rpb25cbiAgICAgZCkgQXJlIG5vdCBlYXNpbHkgYW5zd2VyYWJsZSB3aXRoIGEgc2ltcGxlIHllcyBvciBub1xuICAzLiBGb3IgZWFjaCBxdWVzdGlvbiwgcHJvdmlkZSBhIGJyaWVmIGNvbnRleHQgb3IgZXhwbGFuYXRpb24gb2Ygd2h5IGl0J3MgaW50ZXJlc3Rpbmcgb3IgcmVsZXZhbnQuXG4gIDQuIEZvcm1hdCB5b3VyIHJlc3BvbnNlIGFzIGEgbnVtYmVyZWQgbGlzdCBvZiBxdWVzdGlvbnMgYW5kIGNvbnRleHRzLlxuXG4gIEV4YW1wbGUgZm9ybWF0OlxuICAxLiBRdWVzdGlvbjogSG93IGhhcyBbQ2VsZWJyaXR5XSdzIGFwcHJvYWNoIHRvIFtzcGVjaWZpYyBhc3BlY3RdIGV2b2x2ZWQgdGhyb3VnaG91dCB0aGVpciBjYXJlZXI/XG4gIENvbnRleHQ6IEJhc2VkIG9uIHRoZSBzZWFyY2ggcmVzdWx0cywgW0NlbGVicml0eV0gaGFzIGJlZW4ga25vd24gZm9yIFtzcGVjaWZpYyB0cmFpdF0uIFRoaXMgcXVlc3Rpb24gZXhwbG9yZXMgaG93IHRoYXQgaGFzIGNoYW5nZWQgb3ZlciB0aW1lLlxuXG4gIDIuIFF1ZXN0aW9uOiBbTmV4dCBxdWVzdGlvbl1cbiAgQ29udGV4dDogW05leHQgY29udGV4dF1cblxuICAuLi4gYW5kIHNvIG9uIGZvciAxMCBxdWVzdGlvbnMuXG4gIGA7XG5cbiAgbGV0IGZ1bmN0aW9uVG9SZXR1cm5UaGVMaXN0T2ZRdWVzdGlvbnNJbkpzb25Gb3JtYXQgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcblxuICAgICAgY29uc29sZS5sb2coJ1NlbmRpbmcgcHJvbXB0IHRvIEFJIG1vZGVsJyk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBtb2RlbC5nZW5lcmF0ZUNvbnRlbnQocHJvbXB0KTtcbiAgICAgIGNvbnN0IEFpUmVzcG9uc2UgPSBhd2FpdCByZXN1bHQucmVzcG9uc2U7XG4gICAgICBjb25zdCB0ZXh0ID0gQWlSZXNwb25zZS50ZXh0KCk7XG4gICAgICBjb25zb2xlLmxvZygnQUkgcmVzcG9uc2UgcmVjZWl2ZWQ6JywgdGV4dCk7XG4gICAgXG4gICAgLy8gUGFyc2UgdGhlIHRleHQgcmVzcG9uc2UgaW50byBhbiBhcnJheSBvZiBxdWVzdGlvbi1jb250ZXh0IHBhaXJzXG4gICAgbGV0IHF1ZXN0aW9uc0FuZENvbnRleHQgPSBbXTtcbiAgICBjb25zdCBzZWN0aW9ucyA9IHRleHQuc3BsaXQoL1xcZCtcXC5cXHMrLykuZmlsdGVyKEJvb2xlYW4pO1xuXG4gICAgZm9yIChjb25zdCBzZWN0aW9uIG9mIHNlY3Rpb25zKSB7XG4gICAgICBjb25zdCBbcXVlc3Rpb25QYXJ0LCBjb250ZXh0UGFydF0gPSBzZWN0aW9uLnNwbGl0KC9Db250ZXh0Oi9pKTtcbiAgICAgIGlmIChxdWVzdGlvblBhcnQgJiYgY29udGV4dFBhcnQpIHtcbiAgICAgICAgY29uc3QgcXVlc3Rpb24gPSBxdWVzdGlvblBhcnQucmVwbGFjZSgvXlF1ZXN0aW9uOlxccyovaSwgJycpLnRyaW0oKTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvbnRleHRQYXJ0LnRyaW0oKTtcbiAgICAgICAgcXVlc3Rpb25zQW5kQ29udGV4dC5wdXNoKHsgcXVlc3Rpb24sIGNvbnRleHQgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ1BhcnNlZCBxdWVzdGlvbnMgYW5kIGNvbnRleHQ6JywgcXVlc3Rpb25zQW5kQ29udGV4dCk7XG4gICAgcmV0dXJuIHF1ZXN0aW9uc0FuZENvbnRleHQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2VuZXJhdGluZyBxdWVzdGlvbnM6JywgZXJyb3IpO1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG4gIHJldHVybiBmdW5jdGlvblRvUmV0dXJuVGhlTGlzdE9mUXVlc3Rpb25zSW5Kc29uRm9ybWF0KCk7IC8vIEFkZGVkIHBhcmVudGhlc2VzIHRvIGNhbGwgdGhlIGZ1bmN0aW9uXG59XG5tb2R1bGUuZXhwb3J0cyA9IHsgZ2VuZXJhdGVRdWVzdGlvbnNBYm91dENlbGVicml0eUZyb21TZWFyY2hSZXN1bHRzIH07XG4iXSwibmFtZXMiOlsiR29vZ2xlR2VuZXJhdGl2ZUFJIiwicmVxdWlyZSIsImdlbkFJIiwicHJvY2VzcyIsImVudiIsIkdPT0dMRV9BSV9BUElfS0VZIiwiZ2VuZXJhdGVRdWVzdGlvbnNBYm91dENlbGVicml0eUZyb21TZWFyY2hSZXN1bHRzIiwiSW5wdXR0ZWRDZWxlYnJpdHlGcm9tVXNlciIsInNlYXJjaFJlc3VsdHNGcm9tR29vZ2xlQ3VzdG9tU2VhcmNoQXBpIiwibW9kZWwiLCJnZXRHZW5lcmF0aXZlTW9kZWwiLCJwcm9tcHQiLCJmdW5jdGlvblRvUmV0dXJuVGhlTGlzdE9mUXVlc3Rpb25zSW5Kc29uRm9ybWF0IiwiY29uc29sZSIsImxvZyIsInJlc3VsdCIsImdlbmVyYXRlQ29udGVudCIsIkFpUmVzcG9uc2UiLCJyZXNwb25zZSIsInRleHQiLCJxdWVzdGlvbnNBbmRDb250ZXh0Iiwic2VjdGlvbnMiLCJzcGxpdCIsImZpbHRlciIsIkJvb2xlYW4iLCJzZWN0aW9uIiwicXVlc3Rpb25QYXJ0IiwiY29udGV4dFBhcnQiLCJxdWVzdGlvbiIsInJlcGxhY2UiLCJ0cmltIiwiY29udGV4dCIsInB1c2giLCJlcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./utils/ai.js\n");

/***/ }),

/***/ "(api)/./utils/scraper.js":
/*!**************************!*\
  !*** ./utils/scraper.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst axios = __webpack_require__(/*! axios */ \"axios\");\nasync function scrapeQuestionsFromGoogleCustomSearchApi(InputtedCelebrityFromUser) {\n    const apiKeyToConnectWithGoogleCustomSearchApi = process.env.GOOGLE_API_KEY;\n    const searchEngineIdFromGoogleCustomSearchEngine = process.env.GOOGLE_SEARCH_ENGINE_ID;\n    const googleApiUrlToScrapResultsFrom = `https://www.googleapis.com/customsearch/v1?key=${apiKeyToConnectWithGoogleCustomSearchApi}&cx=${searchEngineIdFromGoogleCustomSearchEngine}&q=${encodeURIComponent(InputtedCelebrityFromUser)}`;\n    let functionToReturnTheListOfQuestionsInJsonFormat = async ()=>{\n        try {\n            console.log(\"Fetching from URL:\", googleApiUrlToScrapResultsFrom); // Fixed variable name\n            const response = await axios.get(googleApiUrlToScrapResultsFrom); // Fixed variable name\n            console.log(\"Response status:\", response.status);\n            const items = response.data.items || [];\n            if (items.length === 0) {\n                console.log(\"No search results found for:\", InputtedCelebrityFromUser);\n                return null;\n            }\n            console.log(\"Number of search results:\", items.length);\n            console.log(\"First search result title:\", items[0].title);\n            let jsonListOfQuestionsInJsonFormat = response.data;\n            // Return the entire response data for AI analysis\n            return JSON.stringify(jsonListOfQuestionsInJsonFormat, null, 2);\n        } catch (error) {\n            console.error(\"Error fetching questions:\", error.message);\n            if (error.response) {\n                console.error(\"Error response:\", JSON.stringify(error.response.data, null, 2));\n            }\n            return null;\n        }\n    };\n    return await functionToReturnTheListOfQuestionsInJsonFormat(); // Call the function\n}\nmodule.exports = {\n    scrapeQuestionsFromGoogleCustomSearchApi\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi91dGlscy9zY3JhcGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBTUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLG9CQUFPLENBQUM7QUFFOUIsZUFBZUMsd0NBQXdDLENBQUNDLHlCQUF5QixFQUFFO0lBQ2pGLE1BQU1DLHdDQUF3QyxHQUFHQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsY0FBYztJQUMzRSxNQUFNQywwQ0FBMEMsR0FBR0gsT0FBTyxDQUFDQyxHQUFHLENBQUNHLHVCQUF1QjtJQUV0RixNQUFNQyw4QkFBOEIsR0FBRyxDQUFDLCtDQUErQyxFQUFFTix3Q0FBd0MsQ0FBQyxJQUFJLEVBQUVJLDBDQUEwQyxDQUFDLEdBQUcsRUFBRUcsa0JBQWtCLENBQUNSLHlCQUF5QixDQUFDLENBQUMsQ0FBQztJQUV2TyxJQUFJUyw4Q0FBOEMsR0FBRyxVQUFZO1FBQy9ELElBQUk7WUFDRkMsT0FBTyxDQUFDQyxHQUFHLENBQUMsb0JBQW9CLEVBQUVKLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxzQkFBc0I7WUFDekYsTUFBTUssUUFBUSxHQUFHLE1BQU1mLEtBQUssQ0FBQ2dCLEdBQUcsQ0FBQ04sOEJBQThCLENBQUMsRUFBRSxzQkFBc0I7WUFDeEZHLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGtCQUFrQixFQUFFQyxRQUFRLENBQUNFLE1BQU0sQ0FBQyxDQUFDO1lBRWpELE1BQU1DLEtBQUssR0FBR0gsUUFBUSxDQUFDSSxJQUFJLENBQUNELEtBQUssSUFBSSxFQUFFO1lBRXZDLElBQUlBLEtBQUssQ0FBQ0UsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDdEJQLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDhCQUE4QixFQUFFWCx5QkFBeUIsQ0FBQyxDQUFDO2dCQUN2RSxPQUFPLElBQUksQ0FBQztZQUNkLENBQUM7WUFFRFUsT0FBTyxDQUFDQyxHQUFHLENBQUMsMkJBQTJCLEVBQUVJLEtBQUssQ0FBQ0UsTUFBTSxDQUFDLENBQUM7WUFDdkRQLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDRCQUE0QixFQUFFSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUNHLEtBQUssQ0FBQyxDQUFDO1lBRTFELElBQUlDLCtCQUErQixHQUFHUCxRQUFRLENBQUNJLElBQUk7WUFFbkQsa0RBQWtEO1lBQ2xELE9BQU9JLElBQUksQ0FBQ0MsU0FBUyxDQUFDRiwrQkFBK0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEUsRUFBRSxPQUFPRyxLQUFLLEVBQUU7WUFDZFosT0FBTyxDQUFDWSxLQUFLLENBQUMsMkJBQTJCLEVBQUVBLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7WUFDMUQsSUFBSUQsS0FBSyxDQUFDVixRQUFRLEVBQUU7Z0JBQ2xCRixPQUFPLENBQUNZLEtBQUssQ0FBQyxpQkFBaUIsRUFBRUYsSUFBSSxDQUFDQyxTQUFTLENBQUNDLEtBQUssQ0FBQ1YsUUFBUSxDQUFDSSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakYsQ0FBQztZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPLE1BQU1QLDhDQUE4QyxFQUFFLENBQUMsQ0FBQyxvQkFBb0I7QUFDckYsQ0FBQztBQUVEZSxNQUFNLENBQUNDLE9BQU8sR0FBRztJQUFFMUIsd0NBQXdDO0NBQUUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYmNlbGVicXVldGlvbmdlbi8uL3V0aWxzL3NjcmFwZXIuanM/ZmQ2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5cbmFzeW5jIGZ1bmN0aW9uIHNjcmFwZVF1ZXN0aW9uc0Zyb21Hb29nbGVDdXN0b21TZWFyY2hBcGkoSW5wdXR0ZWRDZWxlYnJpdHlGcm9tVXNlcikge1xuICBjb25zdCBhcGlLZXlUb0Nvbm5lY3RXaXRoR29vZ2xlQ3VzdG9tU2VhcmNoQXBpID0gcHJvY2Vzcy5lbnYuR09PR0xFX0FQSV9LRVk7XG4gIGNvbnN0IHNlYXJjaEVuZ2luZUlkRnJvbUdvb2dsZUN1c3RvbVNlYXJjaEVuZ2luZSA9IHByb2Nlc3MuZW52LkdPT0dMRV9TRUFSQ0hfRU5HSU5FX0lEO1xuXG4gIGNvbnN0IGdvb2dsZUFwaVVybFRvU2NyYXBSZXN1bHRzRnJvbSA9IGBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9jdXN0b21zZWFyY2gvdjE/a2V5PSR7YXBpS2V5VG9Db25uZWN0V2l0aEdvb2dsZUN1c3RvbVNlYXJjaEFwaX0mY3g9JHtzZWFyY2hFbmdpbmVJZEZyb21Hb29nbGVDdXN0b21TZWFyY2hFbmdpbmV9JnE9JHtlbmNvZGVVUklDb21wb25lbnQoSW5wdXR0ZWRDZWxlYnJpdHlGcm9tVXNlcil9YDtcblxuICBsZXQgZnVuY3Rpb25Ub1JldHVyblRoZUxpc3RPZlF1ZXN0aW9uc0luSnNvbkZvcm1hdCA9IGFzeW5jICgpID0+IHsgLy8gQ2hhbmdlZCB0byBhbiBhc3luYyBhcnJvdyBmdW5jdGlvblxuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgZnJvbSBVUkw6JywgZ29vZ2xlQXBpVXJsVG9TY3JhcFJlc3VsdHNGcm9tKTsgLy8gRml4ZWQgdmFyaWFibGUgbmFtZVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoZ29vZ2xlQXBpVXJsVG9TY3JhcFJlc3VsdHNGcm9tKTsgLy8gRml4ZWQgdmFyaWFibGUgbmFtZVxuICAgICAgY29uc29sZS5sb2coJ1Jlc3BvbnNlIHN0YXR1czonLCByZXNwb25zZS5zdGF0dXMpO1xuXG4gICAgICBjb25zdCBpdGVtcyA9IHJlc3BvbnNlLmRhdGEuaXRlbXMgfHwgW107XG4gICAgICBcbiAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coJ05vIHNlYXJjaCByZXN1bHRzIGZvdW5kIGZvcjonLCBJbnB1dHRlZENlbGVicml0eUZyb21Vc2VyKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKCdOdW1iZXIgb2Ygc2VhcmNoIHJlc3VsdHM6JywgaXRlbXMubGVuZ3RoKTtcbiAgICAgIGNvbnNvbGUubG9nKCdGaXJzdCBzZWFyY2ggcmVzdWx0IHRpdGxlOicsIGl0ZW1zWzBdLnRpdGxlKTtcbiAgICAgIFxuICAgICAgbGV0IGpzb25MaXN0T2ZRdWVzdGlvbnNJbkpzb25Gb3JtYXQgPSByZXNwb25zZS5kYXRhO1xuXG4gICAgICAvLyBSZXR1cm4gdGhlIGVudGlyZSByZXNwb25zZSBkYXRhIGZvciBBSSBhbmFseXNpc1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGpzb25MaXN0T2ZRdWVzdGlvbnNJbkpzb25Gb3JtYXQsIG51bGwsIDIpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8vIEVuc3VyZSB0aGlzIGlzIGluc2lkZSB0aGUgYXN5bmMgZnVuY3Rpb25cbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHF1ZXN0aW9uczonLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZXNwb25zZTonLCBKU09OLnN0cmluZ2lmeShlcnJvci5yZXNwb25zZS5kYXRhLCBudWxsLCAyKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGF3YWl0IGZ1bmN0aW9uVG9SZXR1cm5UaGVMaXN0T2ZRdWVzdGlvbnNJbkpzb25Gb3JtYXQoKTsgLy8gQ2FsbCB0aGUgZnVuY3Rpb25cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IHNjcmFwZVF1ZXN0aW9uc0Zyb21Hb29nbGVDdXN0b21TZWFyY2hBcGkgfTsiXSwibmFtZXMiOlsiYXhpb3MiLCJyZXF1aXJlIiwic2NyYXBlUXVlc3Rpb25zRnJvbUdvb2dsZUN1c3RvbVNlYXJjaEFwaSIsIklucHV0dGVkQ2VsZWJyaXR5RnJvbVVzZXIiLCJhcGlLZXlUb0Nvbm5lY3RXaXRoR29vZ2xlQ3VzdG9tU2VhcmNoQXBpIiwicHJvY2VzcyIsImVudiIsIkdPT0dMRV9BUElfS0VZIiwic2VhcmNoRW5naW5lSWRGcm9tR29vZ2xlQ3VzdG9tU2VhcmNoRW5naW5lIiwiR09PR0xFX1NFQVJDSF9FTkdJTkVfSUQiLCJnb29nbGVBcGlVcmxUb1NjcmFwUmVzdWx0c0Zyb20iLCJlbmNvZGVVUklDb21wb25lbnQiLCJmdW5jdGlvblRvUmV0dXJuVGhlTGlzdE9mUXVlc3Rpb25zSW5Kc29uRm9ybWF0IiwiY29uc29sZSIsImxvZyIsInJlc3BvbnNlIiwiZ2V0Iiwic3RhdHVzIiwiaXRlbXMiLCJkYXRhIiwibGVuZ3RoIiwidGl0bGUiLCJqc29uTGlzdE9mUXVlc3Rpb25zSW5Kc29uRm9ybWF0IiwiSlNPTiIsInN0cmluZ2lmeSIsImVycm9yIiwibWVzc2FnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./utils/scraper.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/questions.js"));
module.exports = __webpack_exports__;

})();